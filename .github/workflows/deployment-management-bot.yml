name: Instance Deployment Bot

on:
  issue_comment:
    types:
      - created

jobs:
  deploy-new-instance:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.comment.html_url, '/issues/') &&
      contains(github.event.comment.body, '/cdp-deploy')

    steps:
      #########################################################################
      # Check allowed users

      - name: Get CDP Organization Members
        id: cdp-members
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          members="$(gh api -X GET 'orgs/CouncilDataProject/members' -F per_page=100 --paginate --cache 1h --jq '[.[].login] | join("---")')"
          echo "::set-output name=members::$members"

      # - name: log github context
      #   run: |
      #     echo ${{ toJSON(github) }}

      - name: Generate Safe Username Check
        id: safe-username
        run: |
          username=${{ github.event.comment.user.login }}
          username="---$username---"
          echo "::set-output name=username::$username"

      - name: Log Username
        run: |
          echo ${{ steps.safe-username.outputs.username }}

      # - name: Check Job Initiator
      #   if: |
      #     contains(
      #       steps.cdp-members.outputs.members,
      #       '---${github.event.comment.user.login}---'
      #     )

      #########################################################################
      # Workflow Setup

      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Install Bot Scripts Dependencies
        run: |
          pip install -r .github/workflows/scripts/requirements.txt
          pip install cookiecutter

      # Run Validation Bot to get Configuration Options
      - name: Dump Issue Body to File
        run: |
          echo "${{ github.event.issue.body }}" > issue-body.md
      - name: Validate Form and Generate Configuration Files
        run: |
          python .github/workflows/scripts/validate-form.py issue-body.md

      #########################################################################
      # Run fast checks

      - name: Read generation-options JSON
        id: generation-options
        run: |
          content="$(cat generation-options.json)"
          echo "::set-output name=content::$content"

      - name: Error Early - Message
        uses: peter-evans/create-or-update-comment@v1
        if: |
          fromJSON(steps.generation-options.outputs.content).scraper_path == null ||
          fromJSON(steps.generation-options.outputs.content).maintainer_name == null ||
          fromJSON(steps.generation-options.outputs.content).repository_path == null
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## Deployment Status

            :warning: :warning: :warning:

            Not all configuration options are present or some options have errors.

            #### Configuration Options

            ```json
            ${{ steps.generation-options.outputs.content }}
            ```

            **Stopping Deployment Procedure**
      
      - name: Error Early - Exit
        if: |
          fromJSON(steps.generation-options.outputs.content).scraper_path == null ||
          fromJSON(steps.generation-options.outputs.content).maintainer_name == null ||
          fromJSON(steps.generation-options.outputs.content).repository_path == null
        run: |
          exit 1
    
      #########################################################################
      # Proceed with deployment

      


      # - name: Create New Instance Repo
      #   run: |
      #     gh repo create \
      #       ${{ fromJSON(steps.genops.outputs.content).repository_path }} \
      #       --confirm \
      #       --public
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}